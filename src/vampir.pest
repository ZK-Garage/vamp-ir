WHITESPACE = _{ " " | "\t" | NEWLINE }

COMMENT = _{ "//" ~ (!"\n" ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

keyword = { "fun" | "def" | "pub" }

valueName = { !keyword ~ ident }

infixOp = { "/" | "*" | "+" | "-" | "=" | "^" | "\\" | "%" }

binary = @{ '0'..'1' }

octal = @{ '0'..'7' }

hexadecimal = @{ '0'..'9' | 'a'..'f' | 'A'..'F' }

integerLiteral = @{ "0x" ~ hexadecimal+ | "0o" ~ octal+ | "0b" ~ binary+ | ASCII_DIGIT+ }

constant = { integerLiteral | "(" ~ ")" }

pattern = { pattern1 ~ ( "as" ~ valueName )* }

pattern1 = { pattern2 ~ ( "," ~ pattern2 )* }

pattern2 = { valueName | constant | "(" ~ pattern ~ ")" }

letBinding = { pattern ~ "=" ~ expr | valueName ~ pattern* ~ "=" ~ expr }

expr = { function | "def" ~ letBinding ~ ( ";" ~ expr )+ | !("def" | "fun") ~ expr1 }

expr1 = { expr2 | "{" ~ expr2 ~ ( ";" ~ expr2 )* ~ "}" }

expr2 = { expr3 ~ ( "," ~ expr3 )* }

expr3 = { expr4 ~ ( &"=" ~ infixOp ~ expr4 )* }

expr4 = { expr5 ~ ( &("+" | "-") ~ infixOp ~ expr5 )* }

expr5 = { expr6 ~ ( &("*" | "/" | "\\" | "%") ~ infixOp ~ expr6 )* }

expr6 = { expr7 ~ ( &"^" ~ infixOp ~ expr7 )* }

expr7 = { "(" ~ negate+ ~ expr8 ~ ")" | expr8 }

expr8 = { expr9+ }

expr9 = { "(" ~ expr ~ ")" | valueName | constant | &"fun" ~ expr | &"def" ~ expr }

function = { "fun" ~ pattern+ ~ &"{" ~ expr }

negate = { "-" }

definition = { "def" ~ letBinding }

declaration = { "pub" ~ valueName ~ ( ", " ~ valueName)* }

moduleItems = _{ SOI ~ ( declaration ~ ";" )* ~ ( ( definition | expr ) ~ ";" )+ ~ EOI }
