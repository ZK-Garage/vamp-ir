WHITESPACE = _{ " " | "\t" | NEWLINE }

COMMENT = _{ "//" ~ (!"\n" ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

lowercaseIdent = @{ (ASCII_ALPHA_LOWER | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

keyword = { "fun" | "def" }

valueName = { !keyword ~ lowercaseIdent }

infixOp = { "/" | "*" | "+" | "-" | "=" | "^" }

integerLiteral = @{ "-"? ~ ( "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ) }

constant = { integerLiteral | "(" ~ ")" }

pattern = { pattern1 ~ ( "as" ~ valueName )* }

pattern1 = { pattern2 ~ ( "," ~ pattern2 )* }

pattern2 = { valueName | constant | "(" ~ pattern ~ ")" }

letBinding = { pattern ~ "=" ~ expr | valueName ~ pattern* ~ &"{" ~ expr }

expr = { function | "def" ~ letBinding ~ ( ";" ~ expr )+ | expr1 }

expr1 = { expr2 | "{" ~ expr2 ~ ( ";" ~ expr2 )* ~ "}" }

expr2 = { expr3 ~ ( "," ~ expr3 )* }

expr3 = { expr4 ~ ( &"=" ~ infixOp ~ expr4 )* }

expr4 = { expr5 ~ ( &("+" | "-") ~ infixOp ~ expr5 )* }

expr5 = { expr6 ~ ( &("*" | "/") ~ infixOp ~ expr6 )* }

expr6 = { expr7 ~ ( &"^" ~ infixOp ~ expr7 )* }

expr7 = { "(" ~ negate+ ~ expr8 ~ ")" | expr8 }

expr8 = { expr9+ }

expr9 = { "(" ~ expr ~ ")" | valueName | constant | &"fun" ~ expr | &"def" ~ expr }

function = { "fun" ~ pattern+ ~ &"{" ~ expr }

negate = { "-" }

definition = { "def" ~ letBinding }

moduleItems = _{ SOI ~ ( ( definition | expr ) ~ ";" )+ ~ EOI }

